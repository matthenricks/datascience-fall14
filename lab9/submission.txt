===================== Neo4j Question 1


MATCH (people:Person {born: 1964}) RETURN people;

name	Keanu Reeves
born	1964

===================== Neo4j Question 2


MATCH (tom:Person {name:"Wil Wheaton"})-[:ACTED_IN]->(m)<-[:ACTED_IN]-(coActors:Person) RETURN coActors

coActors
{"name":"Marshall Bell","born":1942}
{"name":"Kiefer Sutherland","born":1966}
{"name":"John Cusack","born":1966}
{"name":"Corey Feldman","born":1971}
{"name":"Jerry O'Connell","born":1974}
{"name":"River Phoenix","born":1970}


===================== Neo4j Question 3

CREATE (AL:State {name:'Alabama', code:"1L"})
CREATE (AZ:State {name:'Arizona', code:"2L"})
CREATE (AR:State {name:'Arkansas', code:"3L"})
CREATE (CA:State {name:'California', code:"4L"})
CREATE (CO:State {name:'Colorado', code:"5L"})
CREATE (CT:State {name:'Connecticut', code:"6L"})
CREATE (DC:State {name:'District of Columbia', code:"7L"})
CREATE (DE:State {name:'Delaware', code:"8L"})
CREATE (FL:State {name:'Florida', code:"9L"})
CREATE (GA:State {name:'Georgia', code:"10L"})
CREATE (ID:State {name:'Idaho', code:"11L"})
CREATE (IL:State {name:'Illinois', code:"12L"})
CREATE (IN:State {name:'Indiana', code:"13L"})
CREATE (IA:State {name:'Iowa', code:"14L"})
CREATE (KS:State {name:'Kansas', code:"15L"})
CREATE (KY:State {name:'Kentucky', code:"16L"})
CREATE (LA:State {name:'Lousiana', code:"17L"})
CREATE (ME:State {name:'Maine', code:"18L"})
CREATE (MD:State {name:'Maryland', code:"19L"})
CREATE (MA:State {name:'Massachusetts', code:"20L"})
CREATE (MI:State {name:'Michigan', code:"21L"})
CREATE (MN:State {name:'Minnesota', code:"22L"})
CREATE (MS:State {name:'Mississippi', code:"23L"})
CREATE (MO:State {name:'Missouri', code:"24L"})
CREATE (MT:State {name:'Montana', code:"25L"})
CREATE (NE:State {name:'Nebraska', code:"26L"})
CREATE (NV:State {name:'Nevada', code:"27L"})
CREATE (NH:State {name:'New Hampshire', code:"28L"})
CREATE (NJ:State {name:'New Jersey', code:"29L"})
CREATE (NM:State {name:'New Mexico', code:"30L"})
CREATE (NY:State {name:'New York', code:"31L"})
CREATE (NC:State {name:'North Carolina', code:"32L"})
CREATE (ND:State {name:'North Dakota', code:"33L"})
CREATE (OH:State {name:'Ohio', code:"34L"})
CREATE (OK:State {name:'Oklahoma', code:"35L"})
CREATE (OR:State {name:'Oregon', code:"36L"})
CREATE (PA:State {name:'Pennslyvania', code:"37L"})
CREATE (RI:State {name:'Road Island', code:"38L"})
CREATE (SC:State {name:'South Carolina', code:"39L"})
CREATE (SD:State {name:'South Dakota', code:"40L"})
CREATE (TN:State {name:'Tennessee', code:"41L"})
CREATE (TX:State {name:'Texas', code:"42L"})
CREATE (UT:State {name:'Utah', code:"43L"})
CREATE (VT:State {name:'Vermont', code:"44L"})
CREATE (VA:State {name:'Virginia', code:"45L"})
CREATE (WA:State {name:'Washington', code:"46L"})
CREATE (WV:State {name:'West Virginia', code:"47L"})
CREATE (WI:State {name:'Wisconsin', code:"48L"})
CREATE (WY:State {name:'Wyoming', code:"49L"}) 

CREATE 
	(AL)-[:BORDERS]->(FL),
	(AL)-[:BORDERS]->(GA),
	(AL)-[:BORDERS]->(MS),
	(AL)-[:BORDERS]->(TN),
	(AR)-[:BORDERS]->(LA),
	(AR)-[:BORDERS]->(MO),
	(AR)-[:BORDERS]->(MS),
	(AR)-[:BORDERS]->(OK),
	(AR)-[:BORDERS]->(TN),
	(AR)-[:BORDERS]->(TX),
	(AZ)-[:BORDERS]->(CA),
	(AZ)-[:BORDERS]->(CO),
	(AZ)-[:BORDERS]->(NM),
	(AZ)-[:BORDERS]->(NV),
	(AZ)-[:BORDERS]->(UT),
	(CA)-[:BORDERS]->(NV),
	(CA)-[:BORDERS]->(OR),
	(CO)-[:BORDERS]->(KS),
	(CO)-[:BORDERS]->(NE),
	(CO)-[:BORDERS]->(NM),
	(CO)-[:BORDERS]->(OK),
	(CO)-[:BORDERS]->(UT),
	(CO)-[:BORDERS]->(KS),
	(CT)-[:BORDERS]->(MA),
	(CT)-[:BORDERS]->(NY),
	(CT)-[:BORDERS]->(RI),
	(DC)-[:BORDERS]->(MD),
	(DC)-[:BORDERS]->(VA),
	(DE)-[:BORDERS]->(MD),
	(DE)-[:BORDERS]->(NJ),
	(DE)-[:BORDERS]->(PA),
	(FL)-[:BORDERS]->(GA),
	(GA)-[:BORDERS]->(NC),
	(GA)-[:BORDERS]->(SC),
	(GA)-[:BORDERS]->(TN),
	(IA)-[:BORDERS]->(MN),
	(IA)-[:BORDERS]->(MO),
	(IA)-[:BORDERS]->(NE),
	(IA)-[:BORDERS]->(SD),
	(IA)-[:BORDERS]->(WI),
	(ID)-[:BORDERS]->(MT),
	(ID)-[:BORDERS]->(NV),
	(ID)-[:BORDERS]->(OR),
	(ID)-[:BORDERS]->(UT),
	(ID)-[:BORDERS]->(WA),
	(ID)-[:BORDERS]->(WY),
	(IL)-[:BORDERS]->(IA),
	(IL)-[:BORDERS]->(IN),
	(IL)-[:BORDERS]->(KY),
	(IL)-[:BORDERS]->(MI),
	(IL)-[:BORDERS]->(OH),
	(KS)-[:BORDERS]->(MO),
	(KS)-[:BORDERS]->(NE),
	(KS)-[:BORDERS]->(OK),
	(KY)-[:BORDERS]->(MO),
	(KY)-[:BORDERS]->(OH),
	(KY)-[:BORDERS]->(TN),
	(KY)-[:BORDERS]->(VA),
	(KY)-[:BORDERS]->(WV),
	(LA)-[:BORDERS]->(MS),
	(LA)-[:BORDERS]->(TX),
	(MA)-[:BORDERS]->(NH),
	(MA)-[:BORDERS]->(NY),
	(MA)-[:BORDERS]->(RI),
	(MA)-[:BORDERS]->(VT),
	(MD)-[:BORDERS]->(PA),
	(MD)-[:BORDERS]->(VA),
	(MD)-[:BORDERS]->(WV),
	(ME)-[:BORDERS]->(NH),
	(MI)-[:BORDERS]->(OH),
	(MI)-[:BORDERS]->(WI),
	(MN)-[:BORDERS]->(ND),
	(MN)-[:BORDERS]->(SD),
	(MN)-[:BORDERS]->(WI),
	(MO)-[:BORDERS]->(NE),
	(MO)-[:BORDERS]->(OK),
	(MO)-[:BORDERS]->(TN),
	(MS)-[:BORDERS]->(TN),
	(MT)-[:BORDERS]->(ND),
	(MT)-[:BORDERS]->(SD),
	(MT)-[:BORDERS]->(WY),
	(NC)-[:BORDERS]->(SC),
	(NC)-[:BORDERS]->(TN),
	(NC)-[:BORDERS]->(VA),
	(ND)-[:BORDERS]->(SD),
	(NE)-[:BORDERS]->(SD),
	(NE)-[:BORDERS]->(WY),
	(NH)-[:BORDERS]->(VT),
	(NJ)-[:BORDERS]->(NY),
	(NJ)-[:BORDERS]->(PA),
	(NM)-[:BORDERS]->(OK),
	(NM)-[:BORDERS]->(TX),
	(NM)-[:BORDERS]->(UT),
	(NV)-[:BORDERS]->(OR),
	(NV)-[:BORDERS]->(UT),
	(NY)-[:BORDERS]->(PA),
	(NY)-[:BORDERS]->(VT),
	(OH)-[:BORDERS]->(PA),
	(OH)-[:BORDERS]->(WV),
	(OK)-[:BORDERS]->(TX),
	(OR)-[:BORDERS]->(WA),
	(PA)-[:BORDERS]->(WV),
	(SD)-[:BORDERS]->(WY),
	(TN)-[:BORDERS]->(VA),
	(UT)-[:BORDERS]->(WY),
	(VA)-[:BORDERS]->(WV)

CREATE 
	(FL)-[:BORDERS]->(AL),
	(GA)-[:BORDERS]->(AL),
	(MS)-[:BORDERS]->(AL),
	(TM)-[:BORDERS]->(AL),
	(LA)-[:BORDERS]->(AR),
	(MO)-[:BORDERS]->(AR),
	(MS)-[:BORDERS]->(AR),
	(OK)-[:BORDERS]->(AR),
	(TN)-[:BORDERS]->(AR),
	(TX)-[:BORDERS]->(AR),
	(CA)-[:BORDERS]->(AZ),
	(CO)-[:BORDERS]->(AZ),
	(NM)-[:BORDERS]->(AZ),
	(NV)-[:BORDERS]->(AZ),
	(UT)-[:BORDERS]->(AZ),
	(NV)-[:BORDERS]->(CA),
	(OR)-[:BORDERS]->(CA),
	(KS)-[:BORDERS]->(CO),
	(NE)-[:BORDERS]->(CO),
	(NM)-[:BORDERS]->(CO),
	(OK)-[:BORDERS]->(CO),
	(UT)-[:BORDERS]->(CO),
	(KS)-[:BORDERS]->(CO),
	(MA)-[:BORDERS]->(CT),
	(NY)-[:BORDERS]->(CT),
	(RI)-[:BORDERS]->(CT),
	(MD)-[:BORDERS]->(DC),
	(VA)-[:BORDERS]->(DC),
	(MD)-[:BORDERS]->(DE),
	(NJ)-[:BORDERS]->(DE),
	(PA)-[:BORDERS]->(DE),
	(GA)-[:BORDERS]->(FL),
	(NC)-[:BORDERS]->(GA),
	(SC)-[:BORDERS]->(GA),
	(TN)-[:BORDERS]->(GA),
	(MN)-[:BORDERS]->(IA),
	(MO)-[:BORDERS]->(IA),
	(NE)-[:BORDERS]->(IA),
	(SD)-[:BORDERS]->(IA),
	(WI)-[:BORDERS]->(IA),
	(MT)-[:BORDERS]->(ID),
	(NV)-[:BORDERS]->(ID),
	(OR)-[:BORDERS]->(ID),
	(UT)-[:BORDERS]->(ID),
	(WA)-[:BORDERS]->(ID),
	(WY)-[:BORDERS]->(ID),
	(IA)-[:BORDERS]->(IL),
	(IN)-[:BORDERS]->(IL),
	(KY)-[:BORDERS]->(IL),
	(MI)-[:BORDERS]->(IL),
	(OH)-[:BORDERS]->(IL),
	(MO)-[:BORDERS]->(KS),
	(NE)-[:BORDERS]->(KS),
	(OK)-[:BORDERS]->(KS),
	(MO)-[:BORDERS]->(KY),
	(OH)-[:BORDERS]->(KY),
	(TN)-[:BORDERS]->(KY),
	(VA)-[:BORDERS]->(KY),
	(WV)-[:BORDERS]->(KY),
	(MS)-[:BORDERS]->(LA),
	(TX)-[:BORDERS]->(LA),
	(NH)-[:BORDERS]->(MA),
	(NY)-[:BORDERS]->(MA),
	(RI)-[:BORDERS]->(MA),
	(VT)-[:BORDERS]->(MA),
	(PA)-[:BORDERS]->(MD),
	(VA)-[:BORDERS]->(MD),
	(WV)-[:BORDERS]->(MD),
	(NH)-[:BORDERS]->(ME),
	(OH)-[:BORDERS]->(MI),
	(WI)-[:BORDERS]->(MI),
	(ND)-[:BORDERS]->(MN),
	(SD)-[:BORDERS]->(MN),
	(WI)-[:BORDERS]->(MN),
	(NE)-[:BORDERS]->(MO),
	(OK)-[:BORDERS]->(MO),
	(TN)-[:BORDERS]->(MO),
	(TN)-[:BORDERS]->(MS),
	(ND)-[:BORDERS]->(MT),
	(SD)-[:BORDERS]->(MT),
	(WY)-[:BORDERS]->(MT),
	(SC)-[:BORDERS]->(NC),
	(TN)-[:BORDERS]->(NC),
	(WA)-[:BORDERS]->(NC),
	(SD)-[:BORDERS]->(ND),
	(SD)-[:BORDERS]->(NE),
	(WY)-[:BORDERS]->(NE),
	(VT)-[:BORDERS]->(NH),
	(NY)-[:BORDERS]->(NJ),
	(PA)-[:BORDERS]->(NJ),
	(OK)-[:BORDERS]->(NM),
	(TX)-[:BORDERS]->(NM),
	(UT)-[:BORDERS]->(NM),
	(OR)-[:BORDERS]->(NV),
	(UT)-[:BORDERS]->(NV),
	(PA)-[:BORDERS]->(NY),
	(VT)-[:BORDERS]->(NY),
	(PA)-[:BORDERS]->(OH),
	(WV)-[:BORDERS]->(OH),
	(TX)-[:BORDERS]->(OK),
	(WA)-[:BORDERS]->(OR),
	(WV)-[:BORDERS]->(PA),
	(WY)-[:BORDERS]->(SD),
	(VA)-[:BORDERS]->(TN),
	(WY)-[:BORDERS]->(UT),
	(WV)-[:BORDERS]->(VA)


===================== Neo4j Question 4

MATCH (AR:State {name:"Arizona"})-[:BORDERS]->(s:State)<-[:BORDERS]-(CO:State {name:"Colorado"}) RETURN s

RESULT:
name	New Mexico
code	30L
name	Utah
code	43L

===================== Neo4j Question 5

MATCH (CA:State {name:"California"})-[:BORDERS]->(mid:State)<-[:BORDERS]-(pad:State) WHERE NOT (pad:State)<-[:BORDERS]-(CA:State {name:"California"}) RETURN pad

{"name":"Idaho","code":"11L"}
{"name":"Utah","code":"43L"}
{"name":"Washington","code":"46L"}
{"name":"Colorado","code":"5L"}
{"name":"New Mexico","code":"30L"}

===================== GraphX Question 1

case class User(name: String, age: Int)
val userGraph = graph.mapVertices{ case (id, (name, age)) => User(name, age) }
userGraph.triangleCount.vertices.leftJoin(userGraph.vertices) { case(id, orig, u) => s"${u.get.name} participates in ${orig.get} triangles"}.collect().foreach {case(id, st) => println(st)}

David participates in 1 triangles
Fran participates in 1 triangles
Bob participates in 2 triangles
Alice participates in 1 triangles
Charlie participates in 2 triangles
Ed participates in 2 triangles


===================== GraphX Question 2


userGraph.connectedComponents.vertices.leftJoin(userGraph.vertices) { case(id, orig, u) => s"${u.get.name} is in ${orig.get} connected components"}.collect().foreach {case(id, st) => println(st)}

David is in 1 connected components
Fran is in 1 connected components
Bob is in 1 connected components
Alice is in 1 connected components
Charlie is in 1 connected components
Ed is in 1 connected components

===================== GraphX Question 3


import org.apache.spark.graphx.util.GraphGenerators
val graph: Graph[Double, Int] =
  GraphGenerators.rmatGraph(sc, 40, 200).mapVertices( (id, _) => id.toDouble )

val maxTwo: VertexRDD[((Long, Double), (Long, Double))] = graph.mapReduceTriplets[((Long, Double), (Long, Double))](
  triplet => { // Map Function
    // Send message to destination vertex containing counter and age
    Iterator((triplet.dstId, ((triplet.srcId, triplet.srcAttr), (0L, 0.0))))
  },
  (a, b) => {
		var leftside = (0L, 0.0)
		var rightside = (0L, 0.0)	
		if (a._1._2 > b._1._2) {
			leftside = (a._1._1, a._1._2)
			if (a._2._2 >= b._2._2) {
				rightside = (a._2._1, a._2._2)
			} 
		} else if (a._1._2 == b._1._2) {
			leftside = (a._1._1, a._1._2)
			rightside = (a._2._1, a._2._2)
		} else {
			leftside = (b._1._1, b._1._2)
			if (a._1._2 >= b._2._2) {
				rightside = (a._1._1, a._1._2)
			} else {
				rightside = (b._2._1, b._2._2)
			}
		} 
		(leftside, rightside)
	}
)

maxTwo.collect().foreach {println(_)}

------ The Ids of the vertices are the first in the second tuple.
(34,((54,54.0),(51,51.0)))
(56,((60,60.0),(59,59.0)))
(52,((54,54.0),(53,53.0)))
(54,((62,62.0),(58,58.0)))
(46,((62,62.0),(61,61.0)))
(48,((49,49.0),(40,40.0)))
(50,((59,59.0),(0,0.0)))
(32,((57,57.0),(53,53.0)))
(36,((63,63.0),(53,53.0)))
(62,((57,57.0),(56,56.0)))
(42,((60,60.0),(50,50.0)))
(40,((58,58.0),(0,0.0)))
(38,((63,63.0),(0,0.0)))
(58,((59,59.0),(58,58.0)))
(44,((60,60.0),(45,45.0)))
(60,((60,60.0),(0,0.0)))
(39,((50,50.0),(0,0.0)))
(61,((61,61.0),(54,54.0)))
(41,((61,61.0),(43,43.0)))
(47,((47,47.0),(0,0.0)))
(55,((60,60.0),(59,59.0)))
(53,((53,53.0),(44,44.0)))
(59,((59,59.0),(56,56.0)))
(35,((58,58.0),(57,57.0)))
(57,((61,61.0),(59,59.0)))
(51,((59,59.0),(56,56.0)))
(33,((59,59.0),(53,53.0)))
(37,((59,59.0),(53,53.0)))
(45,((58,58.0),(37,37.0)))
(63,((41,41.0),(0,0.0)))
(49,((60,60.0),(57,57.0)))
(43,((50,50.0),(43,43.0)))


===================== GraphX Question 4

val vertexArray1 = Array(
    (1L, "Alabama"), (2L, "Arizona"), (3L, "Arkansas"), (4L, "California"), (5L, "Colorado"),
    (6L, "Connecticut"), (7L, "District of Columbia"), (8L, "Delaware"), (9L, "Florida"), (10L, "Georgia"),
    (11L, "Idaho"), (12L, "Illinois"), (13L, "Indiana"), (14L, "Iowa"), (15L, "Kansas"),
    (16L, "Kentucky"), (17L, "Louisiana"), (18L, "Maine"), (19L, "Maryland"), (20L, "Massachusetts"),
    (21L, "Michigan"), (22L, "Minnesota"), (23L, "Mississippi"), (24L, "Missouri"), (25L, "Montana"),
    (26L, "Nebraska"), (27L, "Nevada"), (28L, "New Hampshire"), (29L, "New Jersey"), (30L, "New Mexico"),
    (31L, "New York"), (32L, "North Carolina"), (33L, "North Dakota"), (34L, "Ohio"), (35L, "Oklahoma"),
    (36L, "Oregon"), (37L, "Pennsylvania"), (38L, "Rhode Island"), (39L, "South Carolina"), (40L, "South Dakota"),
    (41L, "Tennessee"), (42L, "Texas"), (43L, "Utah"), (44L, "Vermont"), (45L, "Virginia"),
    (46L, "Washington"), (47L, "West Virginia"), (48L, "Wisconsin"), (49L, "Wyoming")
)

val edgeArray1 = Array (
    Edge(1L, 9L, 196.1), Edge(1L, 10L, 291.3), Edge(1L, 23L, 323.9), Edge(1L, 41L, 146.7), Edge(3L, 17L, 166.5), Edge(3L, 24L, 325.3), Edge(3L, 23L, 282.8),
    Edge(3L, 35L, 198.2), Edge(3L, 41L, 125.1), Edge(3L, 42L, 65.0), Edge(2L, 4L, 198.4), Edge(2L, 5L, 0.0), Edge(2L, 30L, 391.0), Edge(2L, 27L, 181.4),
    Edge(2L, 43L, 275.8), Edge(4L, 27L, 608.2), Edge(4L, 36L, 216.3), Edge(5L, 15L, 207.7), Edge(5L, 26L, 173.2), Edge(5L, 30L, 333.0), Edge(5L, 35L, 52.9),
    Edge(5L, 43L, 276.1), Edge(5L, 49L, 260.2), Edge(6L, 20L, 86.5), Edge(6L, 31L, 82.3), Edge(6L, 38L, 40.3), Edge(7L, 19L, 24.6), Edge(7L, 45L, 1.9),
    Edge(8L, 19L, 122.0), Edge(8L, 29L, 1.4), Edge(8L, 37L, 22.6), Edge(9L, 10L, 261.4), Edge(10L, 32L, 68.6), Edge(10L, 39L, 249.6), Edge(10L, 41L, 72.6),
    Edge(14L, 22L, 262.1), Edge(14L, 24L, 235.0), Edge(14L, 26L, 148.9), Edge(14L, 40L, 85.6), Edge(14L, 48L, 86.7), Edge(11L, 25L, 569.8), Edge(11L, 27L, 153.0),
    Edge(11L, 36L, 305.8), Edge(11L, 43L, 153.6), Edge(11L, 46L, 210.3), Edge(11L, 49L, 170.7), Edge(12L, 14L, 200.5), Edge(12L, 13L, 295.5), Edge(12L, 16L, 122.4),
    Edge(12L, 24L, 331.6), Edge(12L, 48L, 144.4), Edge(13L, 16L, 296.0), Edge(13L, 21L, 108.4), Edge(13L, 34L, 178.8), Edge(15L, 24L, 307.5), Edge(15L, 26L, 356.5),
    Edge(15L, 35L, 409.1), Edge(16L, 24L, 59.8), Edge(16L, 34L, 155.5), Edge(16L, 41L, 338.5), Edge(16L, 45L, 119.0), Edge(16L, 47L, 79.1), Edge(17L, 23L, 456.6),
    Edge(17L, 42L, 222.7), Edge(20L, 28L, 86.7), Edge(20L, 31L, 49.4), Edge(20L, 38L, 62.6), Edge(20L, 44L, 40.9), Edge(19L, 37L, 195.7), Edge(19L, 45L, 253.7),
    Edge(19L, 47L, 174.0), Edge(18L, 28L, 159.3), Edge(21L, 34L, 69.7), Edge(21L, 48L, 205.1), Edge(22L, 33L, 217.1), Edge(22L, 40L, 180.8), Edge(22L, 48L, 291.1),
    Edge(24L, 26L, 53.6), Edge(24L, 35L, 34.4), Edge(24L, 41L, 60.9), Edge(23L, 41L, 119.2), Edge(25L, 33L, 210.8), Edge(25L, 40L, 65.3), Edge(25L, 49L, 377.7),
    Edge(32L, 39L, 312.2), Edge(32L, 41L, 218.9), Edge(32L, 45L, 327.7), Edge(33L, 40L, 359.0), Edge(26L, 40L, 399.4), Edge(26L, 49L, 138.0), Edge(28L, 44L, 180.0),
    Edge(29L, 31L, 103.4), Edge(29L, 37L, 150.9), Edge(30L, 35L, 34.5), Edge(30L, 42L, 536.2), Edge(30L, 43L, 0.0), Edge(27L, 36L, 152.5), Edge(27L, 43L, 344.6),
    Edge(31L, 37L, 306.1), Edge(31L, 44L, 80.3), Edge(34L, 37L, 92.4), Edge(34L, 47L, 243.5), Edge(35L, 42L, 715.4), Edge(36L, 46L, 385.8), Edge(37L, 47L, 118.6),
    Edge(40L, 49L, 137.7), Edge(41L, 45L, 110.7), Edge(43L, 49L, 173.1), Edge(45L, 47L, 381.2)
)

val vertexRDD1: RDD[(Long, String)] = sc.parallelize(vertexArray1)
val edgeRDD1: RDD[Edge[Double]] = sc.parallelize(edgeArray1)
val graph1: Graph[String, Double] = Graph(vertexRDD1, edgeRDD1)


val maxState: VertexRDD[(Long, Double)] = graph1.mapReduceTriplets[(Long, Double)](
  state => { // Map Function
    // Send message to destination vertex containing counter and age
    Iterator((state.dstId, (state.srcId, state.attr)))
  },
  (a, b) => {
		if (a._2 >= b._2) {
			(a._1, a._2)
		} else {
			(b._1, b._2)
		} 
	}
)

maxState.collect().foreach{println(_)}


(34,(13,178.8))
(4,(2,198.4))
(16,(13,296.0))
(22,(14,262.1))
(28,(18,159.3))
(46,(36,385.8))
(48,(22,291.1))
(30,(2,391.0))
(14,(12,200.5))
(32,(10,68.6))
(36,(11,305.8))
(24,(12,331.6))
(42,(35,715.4))
(40,(26,399.4))
(38,(20,62.6))
(44,(28,180.0))
(20,(6,86.5))
(26,(15,356.5))
(10,(1,291.3))
(13,(12,295.5))
(19,(8,122.0))
(41,(16,338.5))
(39,(32,312.2))
(15,(5,207.7))
(21,(13,108.4))
(47,(45,381.2))
(25,(11,569.8))
(29,(8,1.4))
(35,(15,409.1))
(27,(4,608.2))
(33,(22,217.1))
(37,(31,306.1))
(23,(17,456.6))
(45,(32,327.7))
(17,(3,166.5))
(9,(1,196.1))
(49,(25,377.7))
(31,(29,103.4))
(43,(27,344.6))
(5,(2,0.0))
